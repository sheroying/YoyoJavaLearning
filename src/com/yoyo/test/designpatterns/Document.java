package com.yoyo.test.designpatterns;

public class Document {
    /**
     * 设计模式主要指的就是 GoF 的23种设计模式，其分为三个方面：创建型模式、结构型模式、行为型模式。下面就罗列出每个方面常考的设计模式。
     *
     * 1、创建型模式：
     *
     * 单例模式（文章链接：浅析Java设计模式——单例模式（1）/ 单例模式（2））
     *
     * 工厂模式（文章链接：浅析Java设计模式——简单工厂模式 / 工厂方法模式 / 抽象工厂模式 ）
     *
     * 2、结构型模式：
     *
     * 适配器模式、装饰模式、外观模式（文章链接：适配器模式 / 装饰模式 / 外观模式 ）
     *
     * 3、行为型模式：观察者模式  /  迭代器模式
     *
     * 以上就是常考的设计模式，如有不对的地方还请指正，交流学习。
     * ————————————————
     * 版权声明：本文为CSDN博主「yneng1024」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
     * 原文链接：https://blog.csdn.net/qq_38190057/article/details/80545293
     */

    /**
     *  https://juejin.cn/post/6988423366306693128
     *  开闭原则：一个软件实体如类、模块和函数应该对修改封闭，对扩展开放。
     * 单一职责原则：一个类只做一件事，一个类应该只有一个引起它修改的原因。
     * 里氏替换原则：子类应该可以完全替换父类。也就是说在使用继承时，只扩展新功能，而不要破坏父类原有的功能。
     * 依赖倒置原则：细节应该依赖于抽象，抽象不应依赖于细节。把抽象层放在程序设计的高层，并保持稳定，程序的细节变化由低层的实现层来完成。
     * 迪米特法则：又名「最少知道原则」，一个类不应知道自己操作的类的细节，换言之，只和朋友谈话，不和朋友的朋友谈话。
     * 接口隔离原则：客户端不应依赖它不需要的接口。如果一个接口在实现时，部分方法由于冗余被客户端空实现，则应该将接口拆分，让实现类只需依赖自己需要的接口方法。
     *
     * 作者：笑掉乳牙
     * 链接：https://juejin.cn/post/6988423366306693128
     * 来源：稀土掘金
     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
     */
}
